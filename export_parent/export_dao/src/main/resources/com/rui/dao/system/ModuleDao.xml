<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rui.dao.system.ModuleDao">

    <resultMap id="BaseModuleMap" type="com.rui.domain.system.Module">
        <id column="module_id" property="id" />
        <result column="parent_id" property="parentId" />
        <result column="parent_name" property="parentName" />
        <result column="name" property="name" />
        <result column="layer_num" property="layerNum" />
        <result column="is_leaf" property="isLeaf" />
        <result column="ico" property="ico" />
        <result column="cpermission" property="cpermission" />
        <result column="curl" property="curl" />
        <result column="ctype" property="ctype" />
        <result column="state" property="state" />
        <result column="belong" property="belong" />
        <result column="cwhich" property="cwhich" />
        <result column="quote_num" property="quoteNum" />
        <result column="remark" property="remark" />
        <result column="order_no"  property="orderNo" />
    </resultMap>

    <select id="findAllModule" resultMap="BaseModuleMap">
        select * from ss_module
    </select>

    <select id="findModuleById" parameterType="String" resultMap="BaseModuleMap">
        select * from ss_module where module_id = #{id}
    </select>

    <insert id="save" parameterType="com.rui.domain.system.Module">
        insert into ss_module
        (
          module_id, parent_id, parent_name, name, layer_num, is_leaf,
        ico, cpermission, curl, ctype, state, belong, cwhich, quote_num,
        remark, order_no
        )
        values
        (
          #{id}, #{parentId}, #{parentName}, #{name}, #{layerNum}, #{isLeaf},
        #{ico}, #{cpermission}, #{curl}, #{ctype}, #{state}, #{belong}, #{cwhich}, #{quoteNum},
        #{remark}, #{orderNo}
        )
    </insert>

    <update id="update" parameterType="com.rui.domain.system.Module">
        update ss_module
        set
        parent_id = #{parentId},
        parent_name = #{parentName},
        name = #{name},
        layer_num = #{layerNum},
        is_leaf = #{isLeaf},
        ico = #{ico},
        cpermission = #{cpermission},
        curl = #{curl},
        ctype = #{ctype},
        state = #{state},
        belong = #{belong},
        cwhich = #{cwhich},
        quote_num = #{quoteNum},
        remark = #{remark},
        order_no = #{orderNo}
        where module_id = #{id}
    </update>

    <delete id="delete" parameterType="String">
        delete from ss_module where module_id = #{id}
    </delete>

    <select id="findModuleByRoleId" parameterType="String" resultMap="BaseModuleMap">
        select m.*
        from ss_module m, pe_role_module rm
        where m.module_id = rm.module_id
        and rm.role_id = #{roleId}
    </select>

    <select id="findModuleByBelong" parameterType="int" resultMap="BaseModuleMap">
        select * from ss_module where belong = #{belong}
    </select>

    <select id="findModuleByUserId" parameterType="String" resultMap="BaseModuleMap">
      SELECT  m.* FROM
	    ss_module m
        LEFT JOIN
        (
	    SELECT DISTINCT rm.`module_id`
        FROM pe_role_user ru
        LEFT JOIN pe_role_module rm
        ON ru.`role_id` = rm.`role_id`
        AND ru.`user_id` = #{id}
         ) a
	    ON a.`module_id` = m.`module_id`

    </select>
</mapper>